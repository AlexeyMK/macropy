
from macros import *
import re
from lift import *
from string_interpolate import *


import unittest
from macros import *

class TestLift(unittest.TestCase):

    def test_simple(self):
        test_string("""
            a = 10
            b = 2
            data1 = q%(1 + u%(a + b))
            data2 = q%(1 + (a + b))
            assert eval(unparse(data1)) == 13
            assert eval(unparse(data2)) == 13
            a = 1
            assert eval(unparse(data1)) == 13
            assert eval(unparse(data2)) == 4
        """)

    def test_structured(self):
        test_string("""
            a = [1, 2, "omg"]
            b = ["wtf", "bbq"]
            data1 = q%([x for x in u%(a + b)])
            assert(eval(unparse(data1)) == [1, 2, "omg", "wtf", "bbq"])
            b = []
            assert(eval(unparse(data1)) == [1, 2, "omg", "wtf", "bbq"])
        """)

    def test_quote_unquote(self):
        test_string("""
            x = 1
            y = 2
            a = q%(u%(x + y))
            assert(eval(unparse(a)) == 3)
            x = 0
            y = 0
            assert(eval(unparse(a)) == 3)
        """)

    def test_quote_unquote_ast(self):
        test_string("""
            a = q%(x + y)
            b = q%(ast%a + z)
            x, y, z = 1, 2, 3
            assert(eval(unparse(b)) == 6)
            x, y, z = 1, 3, 9
            assert(eval(unparse(b)) == 13)
        """)

    def test_string_interpolate(self):
        test_string("""
            a, b = 1, 2
            c = s%"%{a} apple and %{b} bananas"
            assert(c == "1 apple and 2 bananas")
        """)

    def test_string_interpolate_2(self):
        test_string("""
            apple_count = 10
            banana_delta = 4
            c = s%"%{apple_count} %{'apples'} and %{apple_count + banana_delta} %{''.join(['b', 'a', 'n', 'a', 'n', 'a', 's'])}"

            assert(c == "10 apples and 14 bananas")
        """)

def test_string(txt):
    txt = txt.strip().replace("\n            ", "\n")

    node = expand_ast(ast.parse(txt))
    exec unparse(node)


